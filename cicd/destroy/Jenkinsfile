pipeline {
    agent {
        label 'infra'
    }

    parameters{
        string(name: 'branch', defaultValue: 'v2', description: 'Branch to build')
        string(name: 'git_url', defaultValue: 'git@github.com:vti-do2402/jenkins-terraform.git', description: 'Git URL')
    }

    environment {
        // GIT_URL = 'git@github.com:mushz0310/do2402-vutienquang.git'
        GIT_KEY_ID = 'git-ssh-key'
        BASE_DIR = ''
        TF_DIR = 'terraform'
        TF_VERSION = '1.10'
        // TERRAFORM = "docker run --rm -v ${TF_DIR}:/app -w /app hashicorp/terraform:${TF_VERSION}"
        TERRAFORM = "terraform"
    }

    stages {
        
        stage('Checkout Code') {
            steps {
                    sh "echo 'Cloning the repository...'"
                    checkout scmGit(branches: [[name: "$branch"]], extensions: [], userRemoteConfigs: [[credentialsId: "${GIT_KEY_ID}", url: "$git_url"]])
                    sh 'ls -la'
            }
        }



        stage('Terraform Init') {
            steps {  
                script {
                    withCredentials([aws(
                        credentialsId: 'aws-credentials-demo',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    )]) {              
                        dir("${TF_DIR}") {
                            sh "${TERRAFORM} init -upgrade"
                            sh "${TERRAFORM} fmt"
                            sh "${TERRAFORM} validate"
                        }
                    }
                }
            }
        }

        stage('Terraform Plan Destroy') {
            steps {
                script {
                    withCredentials([aws(
                        credentialsId: 'aws-credentials-demo',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    )]) {                
                        dir("${TF_DIR}") {
                            sh "${TERRAFORM} plan -destroy"
                        }
                    }
                }
            }
        }

        stage('Approval') {
            steps {
                script {
                    timeout(activity: true, time: 30, unit: 'SECONDS') {
                        input message: "Do you want to proceed with the Terraform Apply?",
                            ok: "Yes, Apply",
                            parameters: []
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    withCredentials([aws(
                        credentialsId: 'aws-credentials-demo',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    )]) {                 
                        dir("${TF_DIR}") {
                            sh "${TERRAFORM} destroy -auto-approve"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
